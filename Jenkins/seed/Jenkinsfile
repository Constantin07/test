#!groovy

@NonCPS
def renderJobConfig(template, binding) {
  def engine = new groovy.text.SimpleTemplateEngine()
  return engine.createTemplate(template).make(binding).toString()
}

// Repos to scan
def repos = [
  [ name: 'test', url: 'git@github.com:Constantin07/test.git', branch: 'master', credentials: 'Git' ]
]

pipeline {
  agent any

  options {
     buildDiscarder(logRotator(numToKeepStr: '20'))
     disableConcurrentBuilds()
  }

  stages {
    stage('Create jobs') {
      steps {
        script {

          repos.each { repo ->
            dir(repo['name']) {
              checkout([$class: 'GitSCM',
                branches: [[name: repo['branch']]],
                extensions: [
                  [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: true],
                  [$class: 'CleanBeforeCheckout']
                ],
                userRemoteConfigs: [[credentialsId: repo['credentials'], url: repo['url']]]
              ])

              findFiles(glob: 'Jenkins/**/Jenkinsfile').each { file->
                println "Job ${file.path} found."

                // Create folder structure
                def jobPath = file.path.tokenize('/')

                String jobName = jobPath[1..-2].join('/').toString()
                if (jobName == 'seed') return // Skip seed job

                String jobFolder = ''
                String folder = ''
                if (jobPath.size() >= 4) {
                  jobPath[1..-3].eachWithIndex { f, i ->
                    if(i == 0) {
                      folder = f
                    } else {
                      folder += '/' + f
                    }
                    jobFolder += 'folder("' + folder + '") {}' + '\n'
                  }
                }
                println jobFolder

                // Configuration options
                String properties = ''

                // Read job config file
                String jobConfigFile = jobPath[0..-2].join('/') + '/config.yml'
                if (fileExists(jobConfigFile)) {
                  Map jobConfig = readYaml(file: jobConfigFile)

                  // Properties
                  if (jobConfig.containsKey('properties')) {
                    properties += 'properties {'
                    jobConfig.properties.each { property ->
                      if (jobConfig.properties.containsKey('githubProjectUrl')) {
                        properties += '\ngithubProjectUrl("' + jobConfig.properties.githubProjectUrl + '")'
                      }
                    }
                    properties += '\n}'
                  }

                }

                // Job template
                def template = '''
                  $folder_path
                  pipelineJob('$job_name') {
                    $properties
                    definition {
                      cpsScm {
                        scm {
                          git {
                            branch('$branch')
                            remote {
                              credentials('$credentials')
                              url('$url')
                            }
                          }
                        }
                        lightweight(true)
                        scriptPath('$scriptPath')
                      }
                    }
                  }
                '''

                def binding = [
                  'folder_path': jobFolder,
                  'job_name': jobName,
                  'properties': properties,
                  'branch': repo['branch'],
                  'credentials': repo['credentials'],
                  'url': repo['url'],
                  'scriptPath': file.path,
                ]

                def rendered = renderJobConfig(template, binding).trim()
                binding = null // Avoid NotSerializableException
                println rendered
                jobDsl(scriptText: rendered)

              } //findFiles
            } // dir
          } // repos
        } //script
      } //steps
    } //stage
  } //stages

}
