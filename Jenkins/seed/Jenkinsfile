#!groovy

// Repositories to scan
def repos = [
  [ url: 'git@github.com:Constantin07/test.git', branch: 'master', credential: 'Git' ]
]

pipeline {
  agent any

  triggers {
    pollSCM('H/2 * * * *')
  }

  options {
     buildDiscarder(logRotator(numToKeepStr: '20'))
     disableConcurrentBuilds()
  }

  stages {
    stage('Create jobs') {
      steps {
        script {
          repos.each { repo ->
            checkout([$class: 'GitSCM', branches: [[name: repo.branch]], extensions: [[$class: 'CleanBeforeCheckout']],
                      userRemoteConfigs: [[credentialsId: repo.credential, url: repo.url]]])

            findFiles(glob: 'Jenkins/**/Jenkinsfile', excludes: '.git').each { f->
              if (!f.directory && f.length > 0) {
                println "${f.path}"

                String jobConfigFile = getJobConfigPath(f.path)
                if (fileExists(jobConfigFile)) {
                  def jobConfig = readYaml(file: jobConfigFile)
                }

                def jobPath = f.path.tokenize('/')

                if (jobPath.size() > 3) {

                  String script = "folder(\'${jobPath[1]}\')"
                  jobDsl(scriptText: script)

                def template = '''
                  pipelineJob('$job_name') {
                    compressBuildLog()
                    definition {
                      cpsScm {
                        lightweight(true)
                        scm {
                          git {
                            remote {
                              name('origin')
                              url('$url')
                              credentials('$credId')
                              branch('$branch')
                            }
                            extensions {
                              cloneOptions {
                                shallow(true)
                              }
                            }
                          }
                        }
                        scriptPath('$scriptPath')
                      }
                    }
                    description('$description')
                  }
                '''

                def binding = [
                  job_name: "${jobPath[1]}/${jobPath[2]}",
                  url: repo.url,
                  credId: repo.credential,
                  branch: repo.branch,
                  scriptPath: f.path,
                  description : ''
                ]

                  def rendered = renderJobConfig(template, binding)
                  binding = null  // Avoid NotSerializableException
                  jobDsl(scriptText: rendered)
                }
              }
            }
          }
        }
      }
    }
  }
}

@NonCPS
def getJobConfigPath(String path) {
  return path.tokenize('/')[0..-2].join('/') + '/config.yml'
}

@NonCPS
def renderJobConfig(template, binding) {
  def engine = new groovy.text.SimpleTemplateEngine()
  return engine.createTemplate(template).make(binding).toString()
}
