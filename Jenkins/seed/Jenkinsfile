#!groovy

// Repositories to scan
def repos = [
  [ url: 'git@github.com:Constantin07/test.git', branch: 'master', credential: 'Git' ]
]

pipeline {
  agent any

  triggers {
    pollSCM('H/2 * * * *')
  }

  options {
     buildDiscarder(logRotator(numToKeepStr: '20'))
     disableConcurrentBuilds()
  }

  stages {
    stage('Create jobs') {
      steps {
        script {
          repos.each { repo ->
            checkout([$class: 'GitSCM', branches: [[name: repo.branch]], extensions: [[$class: 'CleanBeforeCheckout']],
                      userRemoteConfigs: [[credentialsId: repo.credential, url: repo.url]]])

            findFiles(glob: 'Jenkins/**/Jenkinsfile', excludes: '.git').each { f->
              if (!f.directory && f.length > 0) {

                String jobConfigFile = getJobConfigPath(f.path)
                if (fileExists(jobConfigFile)) {
                  def jobConfig = readYaml(file: jobConfigFile)
                }

                def jobPath = f.path.tokenize('/')
                if (jobPath.size() > 3) {
                  String script = "folder(\'${jobPath[1]}\')"
                  jobDsl(scriptText: script)
                }
              }
            }
          }
        }
      }
    }
  }
}

@NonCPS
def getJobConfigPath(String path) {
  return path.tokenize('/')[0..-2].join('/') + '/config.yml'
}
