@Library('global-shared-library') _

import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

def nodeName        = 'master'
def git_url         = 'https://github.com/ansible/ansible.git'

String package_path = 'rpm-build/ansible-*.el7.noarch.rpm'
boolean update      = false

String jobName      = "${env.JOB_NAME}"

node(nodeName){

  properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', numToKeepStr: '20')),
    //pipelineTriggers([githubPush(), pollSCM("TZ=Europe/London\nH H(9-18) * * *")]),
    // Allow to run only one job at a time
    //disableConcurrentBuilds(),
  ])

}

ansiColor('xterm') {

  stage('Checkout') {
    node(nodeName) {
      checkout scm: [$class: 'GitSCM',
        branches: [[name: '*/devel']],
        userRemoteConfigs: [[url: git_url ]],
        extensions: [[$class: 'CleanCheckout']]
      ]

      println "Compare Ansible versions"
      String current_version = sh(script: "rpm -q ansible | cut -d. -f5", returnStdout: true).trim()
      println "current_version=${current_version}"
      String new_version = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
      println "new_version=${new_version}"

      if(current_version == new_version) {
        println "No changes in version"
      } else {
        update = true
      }
    }
  }

  milestone label: 'Checkout'

  if(update) {
    lock("${jobName}") {
      stage('Build') {
        node(nodeName) {
          sh '''
            sudo pip3 install straight.plugin
            make clean
            make rpm
          '''
          stash(name: 'ansible', includes: package_path)
        }
      }

      milestone label: 'Build'

    }

    lock("${jobName}") {
      stage('Approve') {
        try {
          timeout(time: 120, activity: false, unit: 'MINUTES') {
            input(message: "Do you want to install?")
          }
        } catch (FlowInterruptedException e) {
          currentBuild.result = 'ABORTED'
          return
        }
      }

      milestone label: 'Approve'

    }

    lock("${jobName}") {
      stage('Install') {
        node(nodeName) {
          sh """
            sudo yum -y remove ansible
            rm -f ${package_path}
          """
          unstash(name: 'ansible')
          sh "sudo yum -y install ${package_path}"
        }
      }
    }
  }

}
