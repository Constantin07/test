#!goovy

pipeline {

  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    PATH = "$PATH:/usr/local/bin"
    KUBECONFIG = "$HOME/.kube/config"
    ROOT_DIR = "Jenkins/kubernetes/bootstrap/"
  }

  stages {

    stage('Install Calico Overlay') {
      steps {
        dir(env.ROOT_DIR + '0_overlay_network') {
          sh '''
            make install
          '''
        }
        milestone(ordinal: 1)
      }
    }

    stage('Protect critical resources') {
      steps {
        sh '''
          kubectl set resources deployment coredns -n kube-system --limits='cpu=100m,memory=170Mi' --requests='cpu=100m,memory=170Mi' || true
        '''
        milestone(ordinal: 2)
      }
    }

    stage('Install helm') {
      steps {
        dir(env.ROOT_DIR + '1_helm_install') {
          sh 'make install'
        }
        milestone(ordinal: 3)
      }
    }

    stage('Bootstrap') {

      parallel {
        stage('Install metrics-server') {
          steps {
            dir(env.ROOT_DIR + '2_metrics_server') {
              sh '''
                make lint sync
              '''
            }
          }
        }

        stage('Install nginx-ingress') {
          steps {
            dir(env.ROOT_DIR + '3_nginx_ingress') {
              sh 'make lint sync'
            }
          }
        }

        stage('Install external-dns') {
          steps {
            dir(env.ROOT_DIR + '2_external_dns') {
              sh '''
                git crypt unlock
                make lint sync
              '''
            }
          }
        }

        stage('Config vault-auth') {
          steps {
            dir(env.ROOT_DIR + '4_vault_auth') {
              sh 'make install'
            }
          }
        }

      }
    }

  }

  post {
    always {
      cleanWs()
    }
  }

}
