pipeline {

  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    KUBECONFIG = '/home/toolbox/.kube/config'
    HELM_HOME = '/tmp/.helm'
    ROOT_DIR = 'Jenkins/kubernetes/bootstrap/'
    REGISTRY = 'http://centos7.internal:5000'
    DOCKER_IMAGE = 'centos7.internal:5000/tool-box:latest'
    ARGS = '-v /var/lib/jenkins/.kube:/home/toolbox/.kube -v /var/lib/jenkins/.gnupg:/home/toolbox/.gnupg'
  }

  stages {

    stage('Update CoreDNS ConfigMap') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR + '0_update_coredns') {
          sh 'make apply'
        }
        milestone(ordinal: 1)
      }
    }

    stage('Install Calico Overlay') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR + '1_overlay_network') {
          sh 'make install'
        }
        milestone(ordinal: 2)
      }
    }

    stage('Protect critical resources') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        sh '''
          kubectl set resources deployment coredns -n kube-system --limits='cpu=100m,memory=170Mi' --requests='cpu=100m,memory=170Mi' || true
        '''
        milestone(ordinal: 3)
      }
    }

    stage('Install helm') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR + '2_helm_install') {
          sh 'make install'
        }
        milestone(ordinal: 4)
      }
    }

    stage('Install metrics-server') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
           args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR + '3.1_metrics_server') {
          sh '''
            make init lint sync
            ./wait.sh
          '''
        }
        milestone(ordinal: 5)
      }
    }

    stage('Bootstrap') {

      parallel {

        stage('Config vault-auth') {
          agent {
            docker {
              registryUrl env.REGISTRY
              image env.DOCKER_IMAGE
              alwaysPull true
              args env.ARGS
            }
          }
          steps {
            dir(env.ROOT_DIR + '3.0_vault_auth') {
              sh 'make install'
            }
          }
        }

        stage('Install nginx-ingress') {
          agent {
            docker {
              registryUrl env.REGISTRY
              image env.DOCKER_IMAGE
              alwaysPull true
              args env.ARGS
            }
          }
          steps {
            dir(env.ROOT_DIR + '3.2_nginx_ingress') {
              sh 'make init lint sync'
            }
          }
        }

        stage('Install external-dns') {
          agent {
            docker {
              registryUrl env.REGISTRY
              image env.DOCKER_IMAGE
              alwaysPull true
              args env.ARGS
            }
          }
          steps {
            dir(env.ROOT_DIR + '3.3_external_dns') {
              sh '''
                git crypt unlock
                make init lint sync
              '''
            }
          }
        }

        stage('Install node-problem-detector') {
          agent {
            docker {
              registryUrl env.REGISTRY
              image env.DOCKER_IMAGE
              alwaysPull true
              args env.ARGS
            }
          }
          steps {
            dir(env.ROOT_DIR + '3.4_node_problem_detector') {
              sh '''
                make init lint sync
              '''
            }
          }
        }


      }
    }

    stage('Test cluster health') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR + '7_cluster_tests') {
          sh './cluster_status_tests.sh'
        }
        milestone(ordinal: 6)
      }
    }

  }

  post {
    always {
      cleanWs()
    }
  }

}
