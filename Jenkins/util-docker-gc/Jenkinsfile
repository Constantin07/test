#!/usr/bin/env groovy

pipeline {

    agent any

    triggers {
        cron('H * * * *')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timestamps()
        ansiColor('xterm')
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }

    environment {
        DOCKER_IMAGE = 'spotify/docker-gc'
    }

    stages {

        stage('Clean old images and containers') {
            steps {
                script {
                    def image = docker.image(env.DOCKER_IMAGE);
                    image.pull()
                }

                sh '''
                    docker run --rm \
                    --name docker-gc \
                    -e MINIMUM_IMAGES_TO_SAVE=1 \
                    -e FORCE_IMAGE_REMOVAL=1 \
                    -e GRACE_PERIOD_SECONDS=86400 \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    ${DOCKER_IMAGE}
                '''

                sh 'docker ps --filter "status=exited" -q | xargs -r docker rm'
                sh 'docker volume ls --filter "dangling=true" -q | xargs -r docker volume rm'

            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

    }

}
