#!groovy

import jenkins.model.Jenkins
import javaposse.jobdsl.plugin.*
import hudson.model.FreeStyleProject
import hudson.plugins.git.GitSCM
import hudson.plugins.git.BranchSpec
import hudson.plugins.git.UserRemoteConfig

String gitUrl = 'git@github.com:Constantin07/test.git'
String gitBranch = 'master'
String gitCredentialId = 'Git'

def instance = Jenkins.getInstance()

String seedJobName = "seed"

/* Remove existing job if found
instance.items.findAll { job -> job.name == seedJobName }
.each { job -> job.delete(); println "Job ${job.name} deleted." }
*/

dslBuilder = new ExecuteDslScripts()
dslBuilder.setTargets("Jenkins/seed/Jenkinsfile")
dslBuilder.setUseScriptText(false)
dslBuilder.setIgnoreExisting(false)
dslBuilder.setSandbox(false)
dslBuilder.setIgnoreMissingFiles(false)
dslBuilder.setRemovedJobAction(RemovedJobAction.DISABLE)
dslBuilder.setRemovedViewAction(RemovedViewAction.IGNORE)
dslBuilder.setLookupStrategy(LookupStrategy.SEED_JOB)

dslProject = new hudson.model.FreeStyleProject(instance, seedJobName)
dslProject.scm = new GitSCM(gitUrl)
dslProject.scm.branches = [new BranchSpec(gitBranch)]
dslProject.scm.userRemoteConfigs = [new UserRemoteConfig(gitUrl, null, null, gitCredentialId)]

dslProject.createTransientActions()
dslProject.getPublishersList().add(dslBuilder)

def job = instance.getItem(seedJobName)
if (job == null) {
  println "Job '${seedJobName}' not found, adding ..."
  instance.add(dslProject, seedJobName)
}

//TODO: Update existing job if found

