#!groovy

import jenkins.model.*
import com.cloudbees.jenkins.plugins.customtools.CustomTool;
import com.synopsys.arc.jenkinsci.plugins.customtools.versions.ToolVersionConfig;
import hudson.tools.*

def Tools = []
Tools.add(name: 'Terraform', url: 'https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip')
Tools.add(name: 'Packer', url: 'https://releases.hashicorp.com/packer/1.3.3/packer_1.3.3_linux_amd64.zip')

def inst = Jenkins.getInstance()
def desc = inst.getExtensionList(com.cloudbees.jenkins.plugins.customtools.CustomTool.DescriptorImpl.class)[0];
def installs = desc.getInstallations()
def customTools = []

Tools.each { t ->
  if (installs.find { it.name == t.name }) {
    println "${t.name} is already installed"
  } else {
    println "Installing ${t.name}"

    def installers = []
    def tf_installer = new ZipExtractionInstaller(
      '',      // node label to use custom tool on
      t.url,   // url
      ''       // subdir
    )
    installers.add(tf_installer)

    List<ToolProperty> properties = new ArrayList<ToolProperty>()
    properties.add(new InstallSourceProperty(installers))

    def newTool = new CustomTool(
      t.name,                     // Name
      '',                         // Installation directory (home)
      properties,                 // Tool properties
      '',                         // Exported paths
      null,                       // labelSpecifics
      ToolVersionConfig.DEFAULT,  // toolVersion
      null                        // additionalVariables
    )
    customTools.add(newTool)
  }
}

desc.setInstallations((com.cloudbees.jenkins.plugins.customtools.CustomTool[])customTools);
desc.save()
