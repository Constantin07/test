@Library('global-shared-library') _

import jenkins.model.Jenkins

def nodeNames() {
  def nodes = []
  jenkins.model.Jenkins.instance.computers.each { c ->
    def node = c.getNode()
    def name = c.name.toString()
    if (node.getChannel() != null && node.getNumExecutors() > 0) {
      // Master node returns an empty value
      if (name == "") {
        nodes.add("master")
      } else {
        nodes.add(name)
      }
    }
  }
  return nodes
}

node() {
  properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', numToKeepStr: '20')),
    pipelineTriggers([cron("TZ=Europe/London\nH H/4 * * *")]),
    durabilityHint('PERFORMANCE_OPTIMIZED'),
    disableConcurrentBuilds()
  ])
  skipDefaultCheckout()
}

def builders = [:]
nodeNames().each { node ->
  builders[node] = {
    cleanupDocker(node)
  }
}

// Run in parallel on all nodes
parallel builders
