pipeline {

  agent {
    label 'built-in'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    DIRECTORY = 'pipelines/deploy-docker-registry'
    REMOTE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT.substring(0, 8)}"
    PATH = "/usr/local/bin:$PATH"
  }

  stages {

    stage('Build image') {
      steps {
        dir(env.DIRECTORY) {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            sh 'make build tag'
          }
        }
      }
    }

    stage('Scan image'){
      steps {
        dir(env.DIRECTORY) {
          sh 'make scan'
            recordIssues(tools: [trivy(pattern: 'results.json', reportEncoding: 'UTF-8')])
        }
      }
    }

    stage('Publish image') {
      steps {
        dir(env.DIRECTORY) {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            sh 'make push'
          }
        }
      }
    }

    stage('Deploy container') {
      steps {
        dir(env.DIRECTORY) {
          sh 'make deploy'
        }
      }
    }

    stage('Test') {
      steps {
        dir(env.DIRECTORY) {
          sh 'make test'
        }
      }
    }

  }

  post {
    always {
      cleanWs()
    }
  }

}
