pipeline {

  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    KUBECONFIG = '/home/toolbox/.kube/config'
    ROOT_DIR = 'pipelines/kubernetes/bootstrap/3.0_vault_auth'
    REGISTRY = 'http://registry.internal:5000'
    DOCKER_IMAGE = 'registry.internal:5000/tool-box:latest'
    ARGS = '''
      --mount type=bind,src=/var/lib/jenkins/.kube,dst=/home/toolbox/.kube,readonly \
      --mount type=bind,src=/var/lib/jenkins/.gnupg,dst=/home/toolbox/.gnupg
    '''
  }

  stages {

    stage('Validate') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR) {
          sh 'make validate'
        }
      }
    }

    stage('Install vault-auth') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR) {
          sh 'make install'
        }
      }
    }

    stage('Run test') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.ROOT_DIR) {
          sh 'make test'
        }
      }
    }


  }

  post {
    always {
      cleanWs()
    }
  }

}
