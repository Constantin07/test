pipeline {

  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
    parallelsAlwaysFailFast()
  }

  environment {
    KUBECONFIG = '/home/toolbox/.kube/config'
    ROOT_DIR = 'pipelines/kubernetes/kube-bench'
    REGISTRY = 'http://registry.internal:5000'
    DOCKER_IMAGE = 'registry.internal:5000/tool-box:latest'
    ARGS = '-u toolbox --mount type=bind,src=/var/lib/jenkins/.kube,dst=/home/toolbox/.kube,readonly'
  }

  stages {

    stage('Run kube-bench') {

      parallel {

        stage('Run kube-bench on node') {
          agent {
            docker {
              registryUrl env.REGISTRY
              image env.DOCKER_IMAGE
              alwaysPull true
              args env.ARGS
            }
          }
          steps {
            dir(env.ROOT_DIR) {
              sh './kube-bench.sh node'
            }
          }
        }

        stage('Run kube-bench on master') {
          agent {
            docker {
              registryUrl env.REGISTRY
              image env.DOCKER_IMAGE
              alwaysPull true
              args env.ARGS
            }
          }
          steps {
            dir(env.ROOT_DIR) {
              sh './kube-bench.sh master'
            }
          }
        }

      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }

}
