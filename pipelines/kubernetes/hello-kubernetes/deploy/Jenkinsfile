pipeline {

  agent none

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    KUBECONFIG = '/home/toolbox/.kube/config'
    DIRECTORY = 'pipelines/kubernetes/hello-kubernetes/deploy'
    REGISTRY = 'http://centos7.internal:5000'
    DOCKER_IMAGE = 'centos7.internal:5000/tool-box:latest'
    ARGS = '-u toolbox --mount type=bind,src=/var/lib/jenkins/.kube,dst=/home/toolbox/.kube,readonly'
  }

  stages {

    stage('Build image') {
      agent any
      steps {
        dir(env.DIRECTORY + '/dockerfile') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            sh 'make login build tag'
          }
        }
        milestone null
      }
    }

    stage('Scan image') {
      agent any
      environment {
        PATH ="/usr/local/bin:$PATH"
      }
      steps {
        dir(env.DIRECTORY + '/dockerfile') {
          sh 'make scan'
          recordIssues(
            tools: [trivy(pattern: 'results.json', reportEncoding: 'UTF-8')]
          )
        }
        milestone null
      }
    }

    stage('Push image') {
      agent any
      steps {
        dir(env.DIRECTORY + '/dockerfile') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            sh 'make login push'
          }
        }
        milestone null
      }
    }

    stage('Deploy hello-kubernetes app') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        lock('kubernetes/hello-kubernetes') {
          dir(env.DIRECTORY) {
            sh 'make lint sync'
          }
          milestone null
        }
      }
    }

    stage('Test app') {
      agent {
        docker {
          registryUrl env.REGISTRY
          image env.DOCKER_IMAGE
          alwaysPull true
          args env.ARGS
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh './test.sh'
        }
      }
    }

  }

}
