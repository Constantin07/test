pipeline {

  agent {
    label 'built-in'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    durabilityHint('PERFORMANCE_OPTIMIZED')
    ansiColor('xterm')
  }

  environment {
    DIRECTORY = 'pipelines/dockerfiles/tool-box'
    PATH = "/usr/local/bin:$PATH"
  }

  stages {

    stage('Run shellcheck') {
      agent {
        docker {
          image 'koalaman/shellcheck-alpine:stable'
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh """
            shellcheck -o all ./*.sh
          """
        }
      }
    }

    stage('Checkov scan') {
      agent {
        docker {
          image 'bridgecrew/checkov:latest'
          args "--entrypoint=''"
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh """
            checkov -d . --config-file .checkov.yaml \
            -o cli -o junitxml --output-file-path console,results.xml --quiet
          """
          junit skipPublishingChecks: true, testResults: 'results.xml'
        }
      }
    }

    stage('Build image') {
      steps {
        dir(env.DIRECTORY) {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            withCredentials([[$class: 'VaultTokenCredentialBinding', addrVariable: 'VAULT_ADDR', credentialsId: 'vault-approle', tokenVariable: 'VAULT_TOKEN', vaultAddr: 'http://vault.internal:8200']]) {
              sh 'make login build'
            }
          }
        }
      }
    }

    stage('Test image') {
      agent {
        docker {
          image 'registry.internal:5000/tool-box:latest'
          reuseNode true
          alwaysPull true
          args '--mount type=bind,src=/var/lib/jenkins/.gnupg,dst=/home/toolbox/.gnupg'
        }
      }
      steps {
        sh 'git crypt unlock'
        sshagent (credentials: ['jenkins-ssh-key']) {
          dir('ansible') {
            sh 'python3 -V'
            sh 'ansible --version'
            sh 'aws --version'
          }
        }
      }
    }

    stage('Scan image'){
      environment {
        TRIVY_INSECURE = 'true'
      }
      steps {
        dir(env.DIRECTORY) {
          retry(2) {
            sh 'make scan'
          }
          recordIssues(
            tools: [trivy(pattern: 'results.json', reportEncoding: 'UTF-8')]
          )
        }
      }
    }

    stage('Tag image') {
      steps {
        dir(env.DIRECTORY) {
          sh 'make tag'
        }
      }
    }

    stage('Push image') {
      steps {
        dir(env.DIRECTORY) {
          sh 'make push'
        }
      }
    }

    stage('Publish image') {
      steps {
        dir(env.DIRECTORY) {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKERHUB_TOKEN', usernameVariable: 'DOCKERHUB_USERNAME')]) {
            retry(2) {
              sh 'make publish clean'
            }
          }
        }
      }
    }

  }

  post {
    always {
      cleanWs()
    }
  }

}
