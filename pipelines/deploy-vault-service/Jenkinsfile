String version = ''

pipeline {

  agent {
    label 'built-in'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    ansiColor('xterm')
  }

  environment {
    DIRECTORY = 'ansible'
    PYTHONWARNINGS = 'ignore::UserWarning'
  }

  stages {

    stage('Deploy vault service') {
      agent {
        docker {
          registryUrl 'http://registry.internal:5000'
          image 'registry.internal:5000/tool-box:latest'
          alwaysPull true
          args '--mount type=bind,src=/var/lib/jenkins/.gnupg,dst=/home/toolbox/.gnupg'
        }
      }
      steps {
        dir(env.DIRECTORY) {
          sh 'git crypt unlock'
          script {
            def playbook = readYaml file: 'vault.yaml'
            playbook[0].roles.findAll { it.getClass() != String }.each { value ->
              if (value.containsKey('vault_version')) {
                version = value.vault_version
              }
            }
            if (!version) {
              error('Could not find version in yaml file.')
            } else {
              currentBuild.description = version
            }
          }
          sshagent (credentials: ['jenkins-ssh-key']) {
            sh 'ansible-playbook vault.yaml'
          }
        }
      }
    }

  }

  post {
    always {
      cleanWs()
    }
  }

}
