---

# https://github.com/paulbouwer/hello-kubernetes

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hello-kubernetes
  namespace: default
  labels:
    app: hello-kubernetes

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-kubernetes
  namespace: default
  labels:
    app: hello-kubernetes
spec:
  replicas: 2
  strategy:
   type: RollingUpdate
   rollingUpdate:
     maxUnavailable: 1
     maxSurge: 1
  selector:
    matchLabels:
      app: hello-kubernetes
  template:
    metadata:
      labels:
        app: hello-kubernetes
    spec:
      serviceAccountName: hello-kubernetes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              namespaces: [ "default" ]
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - hello-kubernetes
              topologyKey: kubernetes.io/hostname
      containers:
      - name: hello-kubernetes
#        image: paulbouwer/hello-kubernetes:1.5
        image: centos7.internal:5000/hello-kubernetes:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: MESSAGE
          value: Hello world app deployed on Kubernetes!
        - name: VAULT_ADDR
          value: "http://vault.internal:8200"
        - name: VAULT_ROLE
          value: hello-kubernetes
        - name: VAULT_SECRET_PATH
          value: secret/hello-kubernetes
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            memory: 128Mi
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 5
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 5
          timeoutSeconds: 3

      - name: vault-agent
        image: vault:1.2.1
        imagePullPolicy: Always
        args:
          - "agent"
          - "-config=/etc/vault/config.hcl"
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        env:
          - name: VAULT_ADDR
            value: "http://vault.internal:8200"
          - name: VAULT_SKIP_VERIFY
            value: "true"
        volumeMounts:
          - name: vault-config
            mountPath: /etc/vault/config.hcl
            subPath: config.hcl
      volumes:
        - name: vault-config
          configMap:
            name: vault-agent-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: default
data:
  config.hcl: |
    exit_after_auth = false
    pid_file = "/home/vault/pidfile"
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "hello-kubernetes"
        }
      }
    }
    cache {
      use_auto_auth_token = true
    }
    listener "tcp" {
      address = "127.0.0.1:8200"
      tls_disable = true
    }

---
apiVersion: v1
kind: Service
metadata:
  name: hello-kubernetes
  namespace: default
  labels:
    app: hello-kubernetes
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  selector:
    app: hello-kubernetes

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: hello-kubernetes-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: internal
    external-dns.alpha.kubernetes.io/hostname: hello-kubernetes.internal.
    external-dns.alpha.kubernetes.io/ttl: "120"
#    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
#    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
#    nginx.ingress.kubernetes.io/modsecurity-snippet: |
#      SecRuleEngine On
#      SecRequestBodyAccess On
#      SecAuditEngine RelevantOnly
#      SecAuditLogParts ABIJDEFHZ
#      SecAuditLog /var/log/modsec_audit.log
#      SecRuleRemoveById 932140
#      SecRule REQUEST_HEADERS:User-Agent "Nitko" "log,deny,id:107,status:403,msg:\'Fern Scanner Identified\'"
spec:
  rules:
    - host: hello-kubernetes.internal
      http:
        paths:
          - backend:
              serviceName: hello-kubernetes
              servicePort: 8080
            path: /

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: hello-kubernetes
  namespace: default
  labels:
    app: hello-kubernetes
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hello-kubernetes
  minReplicas: 2
  maxReplicas: 8
  targetCPUUtilizationPercentage: 90

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: hello-kubernetes
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: hello-kubernetes
